-- basic.go --
package basic

import "context"

type Params struct {
    String string
    Int int
}

//encore:api public
func Foo(ctx context.Context, p *Params) error { return nil }

-- want:encore_internal__api.go --
package basic

import (
	"context"
	__api "encore.dev/appruntime/api"
	__etype "encore.dev/appruntime/etype"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"strings"
)

type EncoreInternal_FooReq struct {
	Payload *Params
}

type EncoreInternal_FooResp struct{}

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, *EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (*EncoreInternal_FooResp, error) {
		err := Foo(ctx, reqData.Payload)
		if err != nil {
			return nil, err
		}
		return nil, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r *EncoreInternal_FooResp) (*EncoreInternal_FooResp, error) {
		var clone *EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		dec := new(__etype.Unmarshaller)
		params := new(Params)
		reqData.Payload = params
		switch m := httpReq.Method; m {
		case "GET":
			// Decode query string
			qs := httpReq.URL.Query()
			params.String = __etype.UnmarshalOne(dec, __etype.UnmarshalString, "String", qs.Get("string"), false)
			params.Int = __etype.UnmarshalOne(dec, __etype.UnmarshalInt, "Int", qs.Get("int"), false)

		case "POST":
			// Decode request body
			payload := dec.ReadBody(httpReq.Body)
			iter := jsoniter.ParseBytes(json, payload)

			for iter.ReadObjectCB(func(_ *jsoniter.Iterator, key string) bool {
				switch strings.ToLower(key) {
				case "string":
					dec.ParseJSON("String", iter, &params.String)
				case "int":
					dec.ParseJSON("Int", iter, &params.Int)
				default:
					_ = iter.SkipAndReturnBytes()
				}
				return true
			}) {
			}

		default:
			panic("HTTP method is not supported")
		}
		if err := dec.Error; err != nil {
			return nil, nil, err
		}
		return reqData, ps, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp *EncoreInternal_FooResp) (err error) {
		return nil
	},
	Endpoint:       "Foo",
	Methods:        []string{"GET", "POST"},
	Path:           "/basic.Foo",
	PathParamNames: nil,
	Raw:            false,
	RawHandler:     nil,
	RawPath:        "/basic.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/basic.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return reqData.Payload
	},
	Service: "basic",
	SvcNum:  0,
}
